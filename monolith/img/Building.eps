%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14 (Build 18A391) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 2880 2372
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 2880 2372
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
4 w
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 658 2196 cm
307.12991 570.91766 m
347.29306 561.40234 l
347.29306 989.59058 l
767.82477 1011 l
767.82477 811.17883 l
767.82477 777.87531 l
772.54987 777.87531 l
772.54987 768.35999 l
767.82477 765.9812 l
767.82477 749.32941 l
756.01208 744.57178 l
756.01208 723.16235 l
774.91241 720.78351 l
774.91241 708.8894 l
770.18732 706.51056 l
770.18732 689.85883 l
756.01208 682.72235 l
756.01208 663.69177 l
774.91241 661.31293 l
774.91241 649.41882 l
770.18732 647.03998 l
770.18732 630.38824 l
756.01208 623.25177 l
756.01208 606.59998 l
774.91241 604.22119 l
774.91241 592.32709 l
770.18732 589.94824 l
770.18732 570.91766 l
756.01208 561.40234 l
756.01208 547.12939 l
774.91241 544.75061 l
774.91241 532.85645 l
770.18732 530.47766 l
770.18732 511.44705 l
763.09967 506.68942 l
763.09967 487.65881 l
782 485.28 l
782 449.59766 l
722.93658 394.8847 l
722.93658 382.9906 l
718.21149 380.61176 l
715.84894 382.9906 l
668.59821 337.79294 l
668.59821 290.21646 l
600.08459 223.60941 l
564.64655 237.88235 l
481.9577 159.38118 l
481.9577 149.86588 l
477.23264 147.48706 l
474.87009 149.86588 l
311.85498 0 l
0 176.03294 l
0 623.25177 l
0 994.34821 l
266.96677 989.59058 l
266.96677 554.26587 l
307.12991 570.91766 l
h
S
2 0 0 -2 658 2176 cm
0 220.98572 m
311.60001 59.404762 l
472.12122 199.60001 l
476.84244 197.22382 l
474.48181 986.11902 l
479.20303 986.11902 l
481.56363 209.10477 l
625.56061 335.04285 l
630.2818 335.04285 l
627.9212 993.24762 l
630.2818 993.24762 l
635.00305 349.29999 l
712.90302 418.20953 l
717.62427 418.20953 l
715.26361 998 l
717.62427 998 l
722.34546 430.09048 l
779 477.61429 l
779 446.72382 l
719.98486 392.07144 l
717.62427 382.56668 l
665.69092 335.04285 l
663.33032 323.1619 l
599.59393 266.13333 l
564.18488 237.61905 l
474.48181 149.7 l
311.60001 0 l
0 171.08571 l
0 220.98572 l
h
S
2 w
2 0 0 -2 668 1892 cm
0 125.77612 m
122.63333 66.447762 l
141.5 75.9403 l
141.5 59.328358 l
261.77499 0 l
283 14.238806 l
283 18.985075 l
271.20834 23.731344 l
268.85001 40.343285 l
261.77499 35.597015 l
141.5 92.552238 l
141.5 85.432838 l
132.06667 90.179108 l
132.06667 104.41791 l
124.99167 99.671638 l
0 159 l
0 125.77612 l
h
S
2 0 0 -2 668 1694 cm
0 114.88525 m
124.99167 59.836067 l
141.5 67.016396 l
141.5 52.655739 l
264.13333 0 l
283 14.360656 l
283 19.147541 l
271.20834 26.327869 l
271.20834 40.688526 l
264.13333 35.901638 l
141.5 86.163933 l
141.5 81.377052 l
132.06667 83.770493 l
132.06667 98.131149 l
124.99167 93.344261 l
0 146 l
0 114.88525 l
h
S
2 0 0 -2 668 1486 cm
0 97.654549 m
125.15126 50.018181 l
139.31932 57.163635 l
139.31932 45.254547 l
262.10925 0 l
281 7.1454544 l
281 19.054546 l
271.55463 23.818182 l
271.55463 38.109093 l
262.10925 35.727272 l
141.68068 78.599998 l
141.68068 69.072731 l
132.23529 71.454544 l
132.23529 88.127274 l
125.15126 85.745453 l
0 131 l
0 97.654549 l
h
S
2 0 0 -2 668 1286 cm
0 86.25 m
122.63333 43.125 l
141.5 50.3125 l
141.5 38.333332 l
261.77499 0 l
283 9.583333 l
283 19.166666 l
271.20834 21.5625 l
271.20834 38.333332 l
261.77499 33.541668 l
141.5 71.875 l
141.5 62.291668 l
132.06667 64.6875 l
132.06667 79.0625 l
122.63333 74.270836 l
0 115 l
0 86.25 l
h
S
4 w
2 0 0 -2 658 1098 cm
0 73 m
265 2.3548386 l
S
2 w
2 0 0 -2 694 948 cm
0 26.4 m
107 0 l
107 60 l
0 84 l
0 26.4 l
h
S
2 0 0 -2 960 1006 cm
0 24 m
91 0 l
91 64.800003 l
0 84 l
0 24 l
h
S
2 0 0 -2 700 764 cm
0 21.375 m
104 0 l
104 59.375 l
0 76 l
0 21.375 l
h
S
2 0 0 -2 960 806 cm
0 16.625 m
91 0 l
91 64.125 l
0 76 l
0 16.625 l
h
S
2 0 0 -2 700 576 cm
0 14.068966 m
104 0 l
104 56.275864 l
0 68 l
0 14.068966 l
h
S
2 0 0 -2 960 608 cm
0 11.833333 m
91 0 l
91 61.533333 l
0 71 l
0 11.833333 l
h
S
2 0 0 -2 700 394 cm
0 7.2692308 m
104 0 l
104 60.576923 l
0 63 l
0 7.2692308 l
h
S
2 0 0 -2 960 408 cm
0 6.9642859 m
91 0 l
91 60.357143 l
0 65 l
0 6.9642859 l
h
S
Q
0.847 0.847 0.847 sc
q
1214.7693 1842.4 m
1276.7693 1872 l
1334 1832.5333 l
1334 1798 l
1276.7693 1837.4667 l
1210 1802.9333 l
1214.7693 1842.4 l
h
W
0 0 2880 2372 rc
1200 1882 m
1344 1882 l
1344 1788 l
1200 1788 l
h
f
Q
2 w
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1210 1872 cm
2.3846154 14.8 m
33.384617 0 l
62 19.733334 l
62 37 l
33.384617 17.266666 l
0 34.533333 l
2.3846154 14.8 l
h
S
Q
0.847 0.847 0.847 sc
q
1214 1638.4 m
1276.4 1668 l
1334 1633.4667 l
1334 1594 l
1276.4 1633.4667 l
1214 1603.8667 l
1214 1638.4 l
h
W
0 0 2880 2372 rc
1204 1678 m
1344 1678 l
1344 1584 l
1204 1584 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1214 1668 cm
0 14.8 m
31.200001 0 l
60 17.266666 l
60 37 l
31.200001 17.266666 l
0 32.066666 l
0 14.8 l
h
S
Q
0.847 0.847 0.847 sc
q
1214 1445.7142 m
1276.4 1470 l
1334 1436 l
1334 1402 l
1276.4 1431.1428 l
1214 1406.8572 l
1214 1445.7142 l
h
W
0 0 2880 2372 rc
1204 1480 m
1344 1480 l
1344 1392 l
1204 1392 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1214 1470 cm
0 12.142858 m
31.200001 0 l
60 17 l
60 34 l
31.200001 19.428572 l
0 31.571428 l
0 12.142858 l
h
S
Q
0.847 0.847 0.847 sc
q
1214 1242.1538 m
1276.4 1266 l
1334 1237.3846 l
1334 1204 l
1276.4 1232.6154 l
1214 1208.7693 l
1214 1242.1538 l
h
W
0 0 2880 2372 rc
1204 1276 m
1344 1276 l
1344 1194 l
1204 1194 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1214 1266 cm
0 11.923077 m
31.200001 0 l
60 14.307693 l
60 31 l
31.200001 16.692308 l
0 28.615385 l
0 11.923077 l
h
S
Q
0.847 0.847 0.847 sc
q
1210 1038.6666 m
1272 1058 l
1334 1033.8334 l
1334 1000 l
1276.7693 1024.1666 l
1210 1004.8333 l
1210 1038.6666 l
h
W
0 0 2880 2372 rc
1200 1068 m
1344 1068 l
1344 990 l
1200 990 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1210 1058 cm
0 9.666667 m
31 0 l
62 12.083333 l
62 29 l
33.384617 16.916666 l
0 26.583334 l
0 9.666667 l
h
S
Q
0.847 0.847 0.847 sc
q
1210 839.59998 m
1276.7693 854 l
1334 839.59998 l
1334 806 l
1276.7693 825.20001 l
1210 810.79999 l
1210 839.59998 l
h
W
0 0 2880 2372 rc
1200 864 m
1344 864 l
1344 796 l
1200 796 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1210 854 cm
0 7.1999998 m
33.384617 0 l
62 7.1999998 l
62 24 l
33.384617 14.4 l
0 21.6 l
0 7.1999998 l
h
S
Q
0.847 0.847 0.847 sc
q
1210 646.40002 m
1276.7693 656 l
1334 646.40002 l
1334 608 l
1276.7693 622.40002 l
1210 612.79999 l
1210 646.40002 l
h
W
0 0 2880 2372 rc
1200 666 m
1344 666 l
1344 598 l
1200 598 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1210 656 cm
0 4.8000002 m
33.384617 0 l
62 4.8000002 l
62 24 l
33.384617 16.799999 l
0 21.6 l
0 4.8000002 l
h
S
Q
0.847 0.847 0.847 sc
q
1210 441 m
1276.7693 450 l
1334 441 l
1334 414 l
1276.7693 423 l
1210 414 l
1210 441 l
h
W
0 0 2880 2372 rc
1200 460 m
1344 460 l
1344 404 l
1200 404 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1210 450 cm
0 4.5 m
33.384617 0 l
62 4.5 l
62 18 l
33.384617 13.5 l
0 18 l
0 4.5 l
h
S
Q
0.847 0.847 0.847 sc
q
1210 243.42857 m
1276.7693 248 l
1334 243.42857 l
1334 216 l
1276.7693 216 l
1210 216 l
1210 243.42857 l
h
W
0 0 2880 2372 rc
1200 258 m
1344 258 l
1344 206 l
1200 206 l
h
f
Q
1 1 1 sc
q
0 0 2880 2372 rc
2 0 0 -2 1210 248 cm
0 2.2857144 m
33.384617 0 l
62 2.2857144 l
62 16 l
33.384617 16 l
0 16 l
0 2.2857144 l
h
S
2 0 0 -2 1318 1882 cm
0 9.5438595 m
18.754099 0 l
143 102.59649 l
143 136 l
18.754099 38.175438 l
9.3770494 42.947369 l
9.3770494 23.85965 l
0 19.087719 l
0 9.5438595 l
h
S
2 0 0 -2 1314 1678 cm
0 11.826923 m
21.048388 0 l
145 89.884613 l
145 123 l
21.048388 37.846153 l
11.693548 42.576923 l
11.693548 23.653847 l
0 16.557692 l
0 11.826923 l
h
S
2 0 0 -2 1312 1486 cm
0 9.5319147 m
21.09836 0 l
143 78.638298 l
143 112 l
21.09836 38.127659 l
11.721312 40.510639 l
11.721312 23.829786 l
0 19.063829 l
0 9.5319147 l
h
S
2 0 0 -2 1308 1276 cm
0 7.0975609 m
23.387096 0 l
145 66.243904 l
145 97 l
23.387096 33.121952 l
14.032258 37.853657 l
14.032258 21.292683 l
0 14.195122 l
0 7.0975609 l
h
S
4 w
2 0 0 -2 1354 1078 cm
0 0 m
405 183 l
S
2 w
2 0 0 -2 1400 994 cm
0 0 m
86 36.153847 l
86 94 l
0 62.666668 l
0 0 l
h
S
2 0 0 -2 1400 796 cm
0 0 m
86 28.666666 l
86 86 l
0 64.5 l
0 0 l
h
S
2 0 0 -2 1400 602 cm
0 0 m
86 19 l
86 76 l
0 61.75 l
0 0 l
h
S
2 0 0 -2 1400 404 cm
0 0 m
86 11.724138 l
86 68 l
0 60.965519 l
0 0 l
h
S
2 0 0 -2 1630 1648 cm
0 0 m
140 115.2 l
140 144 l
0 36 l
0 0 l
h
S
2 0 0 -2 1630 1474 cm
0 0 m
140 99.555557 l
140 128 l
0 30.814816 l
0 0 l
h
S
2 0 0 -2 1630 1302 cm
0 0 m
140 88.645836 l
140 115 l
0 33.541668 l
0 0 l
h
S
2 0 0 -2 1630 1124 cm
0 0 m
138 73.071426 l
138 99 l
0 30.642857 l
0 0 l
h
S
2 0 0 -2 1640 884 cm
0 0 m
122 49.682926 l
122 97 l
0 54.414635 l
0 0 l
h
S
2 0 0 -2 1640 718 cm
0 0 m
122 38.486488 l
122 89 l
0 57.729729 l
0 0 l
h
S
2 0 0 -2 1640 546 cm
0 0 m
120 26.125 l
120 76 l
0 54.625 l
0 0 l
h
S
2 0 0 -2 1640 372 cm
0 0 m
122 16.851852 l
122 65 l
0 55.370369 l
0 0 l
h
S
2 0 0 -2 1942 1386 cm
0 0 m
73 60 l
73 84 l
0 28.799999 l
0 0 l
h
S
2 0 0 -2 1936 1256 cm
0 0 m
75 57.599998 l
75 84 l
0 26.4 l
0 0 l
h
S
2 0 0 -2 1936 1104 cm
0 0 m
75 49.700001 l
75 71 l
0 26.033333 l
0 0 l
h
S
2 0 0 -2 1936 962 cm
0 0 m
75 41.785713 l
75 65 l
0 27.857143 l
0 0 l
h
S
2 0 0 -2 2112 1244 cm
0 0 m
39 33.090908 l
39 52 l
0 21.272728 l
0 0 l
h
S
2 0 0 -2 2112 1114 cm
0 0 m
39 28.200001 l
39 47 l
0 22.325001 l
0 0 l
h
S
2 0 0 -2 2108 988 cm
0 0 m
39 25.473684 l
39 44 l
0 20.842106 l
0 0 l
h
S
2 0 0 -2 2108 864 cm
0 0 m
39 20.647058 l
39 39 l
0 20.647058 l
0 0 l
h
S
2 0 0 -2 1936 764 cm
0 0 m
68 28.137932 l
68 68 l
0 46.896553 l
0 0 l
h
S
2 0 0 -2 1936 624 cm
0 0 m
68 24.074074 l
68 65 l
0 48.148148 l
0 0 l
h
S
2 0 0 -2 1936 476 cm
0 0 m
68 16.799999 l
68 60 l
0 48 l
0 0 l
h
S
2 0 0 -2 1932 332 cm
0 0 m
70 9.5238094 l
70 50 l
0 45.238094 l
0 0 l
h
S
2 0 0 -2 2108 692 cm
0 0 m
34 14.181818 l
34 52 l
0 40.18182 l
0 0 l
h
S
2 0 0 -2 2108 560 cm
0 0 m
34 9.3999996 l
34 47 l
0 39.950001 l
0 0 l
h
S
2 0 0 -2 2108 434 cm
0 0 m
31 6.9473686 l
31 44 l
0 39.36842 l
0 0 l
h
S
2 0 0 -2 2102 304 cm
0 0 m
34 4.5882354 l
34 39 l
0 36.705883 l
0 0 l
h
S
1 w
2 0 0 -2 856 2008 cm
0 136 m
0 107.36842 l
208 0 l
208 66.807014 l
S
2 0 0 -2 850 1798 cm
0 125 m
0 91.981133 l
210 0 l
210 66.037735 l
S
2 0 0 -2 850 1600 cm
0 120 m
0 84 l
210 0 l
210 67.199997 l
S
2 0 0 -2 846 1402 cm
0 110 m
0 71.739128 l
213 0 l
213 66.95652 l
S
2 0 0 -2 850 1204 cm
0 97 m
0 59.146343 l
210 0 l
210 70.975609 l
S
2 0 0 -2 1272 2008 cm
0 0 m
143 120 l
143 144 l
S
2 0 0 -2 1272 1800 cm
0 0 m
143 104.98245 l
143 136 l
S
2 0 0 -2 1272 1600 cm
0 0 m
143 92.25 l
143 123 l
S
2 0 0 -2 1272 1402 cm
0 0 m
143 79.469391 l
143 118 l
S
2 0 0 -2 1272 1208 cm
0 0 m
143 68.545456 l
143 104 l
S
2 0 0 -2 882 1816 cm
0 37 m
0 19.733334 l
36 0 l
36 24.666666 l
S
2 0 0 -2 1022 1940 cm
0 65 m
0 45.740742 l
91 0 l
91 26.481482 l
S
2 0 0 -2 882 1636 cm
0 39 m
0 17.0625 l
36 0 l
36 24.375 l
S
2 0 0 -2 1026 1742 cm
0 60 m
0 36 l
86 0 l
86 26.4 l
S
2 0 0 -2 882 1450 cm
0 37 m
0 14.8 l
39 0 l
39 24.666666 l
S
2 0 0 -2 1022 1548 cm
0 60 m
0 33.599998 l
91 0 l
91 30 l
S
2 0 0 -2 882 1272 cm
0 39 m
0 14.625 l
39 0 l
39 26.8125 l
S
2 0 0 -2 1028 1354 cm
0 60 m
0 31.200001 l
88 0 l
88 31.200001 l
S
2 0 0 -2 882 1088 cm
0 37 m
0 12.333333 l
36 0 l
36 24.666666 l
S
2 0 0 -2 1026 1152 cm
0 47 m
0 23.5 l
86 0 l
86 30.549999 l
S
2 0 0 -2 772 1204 cm
0 24 m
0 11.878788 l
36 0 l
S
2 0 0 -2 772 1036 cm
0 24 m
0 12 l
39 0 l
S
2 0 0 -2 772 1382 cm
0 24 m
0 16.799999 l
39 0 l
S
2 0 0 -2 1412 1856 cm
0 9.3999996 m
0 0 l
47 37.599998 l
47 47 l
S
2 0 0 -2 1416 1668 cm
0 14.1 m
0 0 l
44 30.549999 l
44 47 l
S
2 0 0 -2 1412 1486 cm
0 19.047619 m
0 0 l
47 30.952381 l
47 50 l
S
2 0 0 -2 1412 1298 cm
0 26.190475 m
0 0 l
47 26.190475 l
47 50 l
S
2 0 0 -2 1412 1108 cm
0 25.473684 m
0 0 l
47 20.842106 l
47 44 l
S
2 0 0 -2 1624 1694 cm
0 0 m
31 23.157894 l
31 44 l
S
2 0 0 -2 1624 1528 cm
0 0 m
31 21.15 l
31 47 l
S
2 0 0 -2 1624 1360 cm
0 0 m
29 18.526316 l
29 44 l
S
2 0 0 -2 1624 1198 cm
0 0 m
29 14.1 l
29 47 l
S
2 0 0 -2 1624 1030 cm
0 0 m
31 14.1 l
31 47 l
S
2 0 0 -2 1640 852 cm
0 0 m
23 6.9473686 l
23 44 l
S
2 0 0 -2 1640 692 cm
0 0 m
23 7.1428571 l
23 50 l
S
2 0 0 -2 1646 524 cm
0 0 m
18 4.6999998 l
18 47 l
S
2 0 0 -2 1640 356 cm
0 0 m
21 2.3499999 l
21 47 l
S
2 0 0 -2 1780 1574 cm
0 21.807692 m
0 0 l
49 43.615383 l
49 63 l
S
2 0 0 -2 1780 1422 cm
0 26.4 m
0 0 l
47 36 l
47 60 l
S
2 0 0 -2 1770 1266 cm
0 23.913044 m
0 0 l
49 28.695652 l
49 55 l
S
2 0 0 -2 1780 1108 cm
0 30.875 m
0 0 l
47 23.75 l
47 57 l
S
2 0 0 -2 1780 958 cm
0 33.090908 m
0 0 l
44 21.272728 l
44 52 l
S
2 0 0 -2 1780 802 cm
0 35.714287 m
0 0 l
44 16.666666 l
44 50 l
S
2 0 0 -2 1780 650 cm
0 40.476189 m
0 0 l
44 11.904762 l
44 50 l
S
2 0 0 -2 1780 498 cm
0 42.857143 m
0 0 l
44 9.5238094 l
44 50 l
S
2 0 0 -2 1780 342 cm
0 42.299999 m
0 0 l
47 4.6999998 l
47 47 l
S
2 0 0 -2 1936 1418 cm
0 0 m
16 14.4 l
16 24 l
S
2 0 0 -2 1936 1266 cm
0 0 m
13 9.1428576 l
13 16 l
S
2 0 0 -2 1936 1136 cm
0 0 m
13 9.333333 l
13 21 l
S
2 0 0 -2 1930 994 cm
0 0 m
16 9.6000004 l
16 24 l
S
2 0 0 -2 1932 858 cm
0 0 m
18 9.6000004 l
18 24 l
S
2 0 0 -2 1936 718 cm
0 0 m
16 4.8333335 l
16 29 l
S
2 0 0 -2 1936 576 cm
0 0 m
13 4.8333335 l
13 29 l
S
2 0 0 -2 1936 440 cm
0 0 m
13 2.3846154 l
13 31 l
S
2 0 0 -2 1932 300 cm
0 0 m
13 0 l
13 29 l
S
2 0 0 -2 1992 1230 cm
0 7 m
0 0 l
16 11.666667 l
16 21 l
S
2 0 0 -2 1992 1100 cm
0 12 m
0 0 l
16 9.6000004 l
16 24 l
S
2 0 0 -2 1988 968 cm
0 16.545454 m
0 0 l
18 11.818182 l
18 26 l
S
2 0 0 -2 1992 832 cm
0 16.799999 m
0 0 l
16 9.6000004 l
16 24 l
S
2 0 0 -2 1988 696 cm
0 21.272728 m
0 0 l
18 7.090909 l
18 26 l
S
2 0 0 -2 1994 560 cm
0 21.272728 m
0 0 l
18 4.7272725 l
18 26 l
S
2 0 0 -2 1992 426 cm
0 26.583334 m
0 0 l
16 2.4166667 l
16 29 l
S
2 0 0 -2 1992 294 cm
0 26.583334 m
0 0 l
16 0 l
16 29 l
S
2 0 0 -2 1998 1366 cm
0 9.6000004 m
0 0 l
16 14.4 l
16 24 l
S
2 0 0 -2 782 858 cm
0 26 m
0 9.454545 l
34 0 l
34 18.90909 l
S
2 0 0 -2 778 686 cm
0 31 m
0 7.1538463 l
36 0 l
36 23.846153 l
S
2 0 0 -2 778 518 cm
0 34 m
0 4.8284025 l
36 0 l
36 31.384615 l
S
2 0 0 -2 778 346 cm
0 37 m
0 2.4666667 l
39 0 l
39 37 l
S
2 0 0 -2 882 896 cm
0 34 m
0 2.4285715 l
13 0 l
S
2 0 0 -2 882 718 cm
0 37 m
0 4.9333334 l
13 0 l
S
2 0 0 -2 882 534 cm
0 37 m
0 2.4666667 l
13 0 l
S
2 0 0 -2 882 358 cm
0 42 m
0 2.3333333 l
13 0 l
S
2 0 0 -2 1026 946 cm
0 44 m
0 13.894737 l
55 0 l
S
2 0 0 -2 1026 754 cm
0 44 m
0 9.2631578 l
55 0 l
S
2 0 0 -2 1022 566 cm
0 44 m
0 9.2631578 l
57 0 l
S
2 0 0 -2 1026 372 cm
0 44 m
0 4.6315789 l
55 0 l
S
2 0 0 -2 1400 938 cm
0 0 m
52 21.428572 l
52 50 l
S
2 0 0 -2 1406 744 cm
0 0 m
49 16.666666 l
49 50 l
S
2 0 0 -2 1400 554 cm
0 0 m
52 9.2631578 l
52 44 l
S
2 0 0 -2 1400 368 cm
0 0 m
52 9.3999996 l
52 47 l
S
2 0 0 -2 1688 1114 cm
0 0 m
23 11.666667 l
23 21 l
S
2 0 0 -2 1688 958 cm
0 0 m
23 9.333333 l
23 21 l
S
2 0 0 -2 1688 802 cm
0 0 m
23 9.666667 l
23 29 l
S
2 0 0 -2 1688 634 cm
0 0 m
23 4.7272725 l
23 26 l
S
2 0 0 -2 1682 482 cm
0 0 m
23 4.7692308 l
23 31 l
S
2 0 0 -2 1682 326 cm
0 0 m
26 2.4285715 l
26 34 l
S
2 0 0 -2 674 1746 cm
0 0 m
39 21.461538 l
39 31 l
S
2 0 0 -2 668 1570 cm
0 0 m
39 17.266666 l
39 37 l
S
2 0 0 -2 668 1398 cm
0 0 m
42 17.266666 l
42 37 l
S
2 0 0 -2 668 1224 cm
0 0 m
39 9.75 l
39 39 l
S
2 0 0 -2 668 1056 cm
0 0 m
39 13.764706 l
39 39 l
S
2 0 0 -2 694 880 cm
0 0 m
29 7 l
29 42 l
S
2 0 0 -2 700 712 cm
0 0 m
23 6.9473686 l
23 44 l
S
2 0 0 -2 704 544 cm
0 0 m
21 7.0500002 l
21 47 l
S
2 0 0 -2 700 372 cm
0 0 m
26 4.7272725 l
26 52 l
S
2 0 0 -2 752 1756 cm
0 26 m
52 0 l
S
2 0 0 -2 746 1580 cm
0 21 m
52 0 l
S
2 0 0 -2 752 1408 cm
0 21 m
49 0 l
S
2 0 0 -2 746 1234 cm
0 16 m
49 0 l
S
2 0 0 -2 746 1062 cm
0 16 m
52 0 l
S
2 0 0 -2 752 922 cm
0 29 m
47.272728 16.916666 l
47.272728 4.8333335 l
78 0 l
S
2 0 0 -2 746 744 cm
0 24 m
49.636364 14.4 l
49.636364 4.8000002 l
78 0 l
S
2 0 0 -2 746 566 cm
0 18 m
49.645161 9.6428576 l
49.645161 5.1428571 l
81 0 l
S
2 0 0 -2 752 382 cm
0 10 m
47.272728 5 l
78 0 l
S
2 0 0 -2 850 372 cm
1.5 0 m
1.5 13 l
S
2 0 0 -2 842 544 cm
1.5 0 m
1.5 13 l
S
2 0 0 -2 842 718 cm
1.5 0 m
1.5 16 l
S
2 0 0 -2 842 890 cm
1.5 0 m
1.5 16 l
S
2 0 0 -2 964 978 cm
0 9.1428576 m
16.722221 16 l
86 0 l
S
2 0 0 -2 996 942 cm
1.5 0 m
1.5 47 l
S
2 0 0 -2 960 786 cm
0 7.8000002 m
19.027027 13 l
88 0 l
S
2 0 0 -2 996 760 cm
1.5 0 m
1.5 47 l
S
2 0 0 -2 964 598 cm
0 10.4 m
16.722221 13 l
86 0 l
S
2 0 0 -2 996 572 cm
1.5 0 m
1.5 50 l
S
2 0 0 -2 996 398 cm
1.5 0 m
1.5 57 l
S
2 0 0 -2 1002 404 cm
0 3 m
70 0 l
S
2 0 0 -2 1558 1784 cm
0 8 m
23 0 l
S
2 0 0 -2 1562 1606 cm
0 8 m
21 0 l
S
2 0 0 -2 1562 1434 cm
0 8 m
21 0 l
S
2 0 0 -2 1562 1256 cm
0 5 m
21 0 l
S
2 0 0 -2 1562 1078 cm
0 5 m
21 0 l
S
2 0 0 -2 1406 958 cm
0 0 m
75 28.4 l
75 71 l
S
2 0 0 -2 1402 776 cm
0 0 m
75 26.033333 l
75 71 l
S
2 0 0 -2 1402 586 cm
0 0 m
75 16.851852 l
75 65 l
S
2 0 0 -2 1406 394 cm
0 0 m
73 9.6000004 l
73 60 l
S
2 0 0 -2 1682 514 cm
0 0 m
32.900002 8 l
47 8 l
S
2 0 0 -2 1748 498 cm
1.5 0 m
1.5 39 l
S
2 0 0 -2 1682 352 cm
0 0 m
32.666668 5 l
49 5 l
S
2 0 0 -2 1748 342 cm
1.5 0 m
1.5 39 l
S
2 0 0 -2 1686 676 cm
0 0 m
30.105263 13 l
44 13 l
S
2 0 0 -2 1748 650 cm
1.5 0 m
1.5 37 l
S
2 0 0 -2 1686 828 cm
0 0 m
30.105263 13 l
44 10.833333 l
S
2 0 0 -2 1748 802 cm
1.5 0 m
1.5 29 l
S
2 0 0 -2 1686 984 cm
0 0 m
30.105263 13 l
44 13 l
S
2 0 0 -2 1748 958 cm
1.5 0 m
1.5 26 l
S
2 0 0 -2 1682 1146 cm
0 0 m
32.900002 18 l
47 15.75 l
S
2 0 0 -2 1748 1104 cm
1.5 0 m
1.5 21 l
S
2 0 0 -2 1686 1308 cm
0 0 m
32.666668 24 l
42 21.6 l
S
2 0 0 -2 1748 1256 cm
1.5 0 m
1.5 13 l
S
2 0 0 -2 1686 1460 cm
0 0 m
30.105263 21 l
44 18.666666 l
S
2 0 0 -2 1748 1412 cm
1.5 0 m
1.5 13 l
S
2 0 0 -2 1686 1626 cm
0 0 m
30.105263 29 l
44 26.583334 l
S
2 0 0 -2 1748 1570 cm
1.5 0 m
1.5 8 l
S
2 0 0 -2 1942 1428 cm
0 0 m
56.516129 47 l
73 42.299999 l
S
2 0 0 -2 2050 1334 cm
1.5 0 m
1.5 16.875 l
S
2 0 0 -2 1936 1296 cm
0 0 m
58.59375 44 l
75 39.36842 l
S
2 0 0 -2 2050 1202 cm
1.5 0 m
1.5 18 l
S
2 0 0 -2 1936 1156 cm
0 0 m
58.59375 42 l
75 37.333332 l
S
2 0 0 -2 2050 1072 cm
1.5 0 m
1.5 21 l
S
2 0 0 -2 1930 1020 cm
0 0 m
61.454544 39 l
78 31.6875 l
S
2 0 0 -2 2050 942 cm
1.5 0 m
1.5 21 l
S
2 0 0 -2 1932 880 cm
0 0 m
56.25 29 l
75 26.583334 l
S
2 0 0 -2 2040 822 cm
1.5 0 m
1.5 24 l
S
2 0 0 -2 1936 738 cm
0 0 m
58.620689 21 l
68 16.333334 l
S
2 0 0 -2 2050 696 cm
1.5 0 m
1.5 31 l
S
2 0 0 -2 1936 602 cm
0 0 m
56.275864 18 l
68 15.75 l
S
2 0 0 -2 2044 566 cm
1.5 0 m
1.5 31 l
S
2 0 0 -2 1936 462 cm
0 0 m
58.620689 13 l
68 10.4 l
S
2 0 0 -2 2050 436 cm
1.5 0 m
1.5 37 l
S
2 0 0 -2 2050 314 cm
1.5 0 m
1.5 39 l
S
2 0 0 -2 2108 1276 cm
0 0 m
23.5 21 l
47 21 l
S
2 0 0 -2 2154 1234 cm
1.5 0 m
1.5 10 l
S
2 0 0 -2 2108 1152 cm
0 0 m
29 21 l
S
2 0 0 -2 2108 1030 cm
0 0 m
26 18 l
S
2 0 0 -2 2108 912 cm
0 0 m
29 16 l
S
2 0 0 -2 2108 786 cm
0 0 m
26 13 l
S
2 0 0 -2 2108 664 cm
0 0 m
23.846153 10 l
31 7.5 l
S
2 0 0 -2 2154 644 cm
1.5 0 m
1.5 24 l
S
2 0 0 -2 2108 546 cm
0 0 m
23.846153 8 l
31 8 l
S
2 0 0 -2 2154 528 cm
1.5 0 m
1.5 31 l
S
2 0 0 -2 2112 420 cm
0 0 m
19.333334 5 l
29 5 l
S
2 0 0 -2 2148 414 cm
1.5 0 m
1.5 31 l
S
2 0 0 -2 2108 294 cm
0 0 m
29 3 l
S
2 0 0 -2 2148 290 cm
1.5 0 m
1.5 29 l
S
2 0 0 -2 1852 1742 cm
1.5 0 m
1.5 37 l
S
2 0 0 -2 1270 1010 cm
1.5 0 m
1.5 84 l
S
2 0 0 -2 1270 816 cm
1.5 0 m
1.5 86 l
S
2 0 0 -2 1270 612 cm
1.5 0 m
1.5 86 l
S
2 0 0 -2 1270 414 cm
1.5 0 m
1.5 86 l
S
ep
end
%%Trailer
%%EOF
